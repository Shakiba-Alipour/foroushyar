import { createSlice, PayloadAction } from "@reduxjs/toolkit";

export interface User {
  full_name: string;
  id: string;
  shop_name: string;
  address: string;
  description: string;
  phone_panel: string;
  phone: string;
  instagram_id: string;
  website_url: string;
  send_social: boolean;
  send_contact: boolean;
  has_follow_up_message: boolean;
  followup_message: string;
  welcome_message: string;
}

interface AuthState {
  user: User | null;
  token: string | null;
}

const initialState: AuthState = {
  user: {
    full_name: localStorage.getItem("full_name") || "",
    id: localStorage.getItem("id") || "",
    shop_name: localStorage.getItem("shop_name") || "",
    address: localStorage.getItem("address") || "",
    description: localStorage.getItem("description") || "",
    phone_panel: localStorage.getItem("phone_panel") || "",
    phone: localStorage.getItem("phone") || "",
    instagram_id: localStorage.getItem("instagram_id") || "",
    website_url: localStorage.getItem("website_url") || "",
    send_social: JSON.parse(localStorage.getItem("send_social") || "false"),
    send_contact: JSON.parse(localStorage.getItem("send_contact") || "false"),
    has_follow_up_message: JSON.parse(
      localStorage.getItem("has_follow_up_message") || "false"
    ),
    followup_message: localStorage.getItem("followup_message") || "",
    welcome_message: localStorage.getItem("welcome_message") || "",
  },
  token: localStorage.getItem("access_token") || "",
};

const authSlice = createSlice({
  name: "authentication",
  initialState,
  // The functions that handle updates to the authentication state
  reducers: {
    login: (state, action: PayloadAction<{ user: User; token: string }>) => {
      // Update the authState in the app
      state.user = action.payload.user;
      state.token = action.payload.token;
    },
    logout: (state) => {
      // Clear the authState from the app
      state.user = null;
      state.token = null;
    },
    update: (state, action: PayloadAction<Partial<User>>) => {
      // to update user partially
      if (state.user) {
        state.user = { ...state.user, ...action.payload };
      }
    },
  },
});

// Export the reducers which take the current state and an action as arguments, and return a new state result (the reducer function generated by createSlice())
export default authSlice.reducer;
// Export the actions which describe something that happened in the application
export const authActions = authSlice.actions;
