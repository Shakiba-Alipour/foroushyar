import { createSlice, PayloadAction } from "@reduxjs/toolkit";

interface User {
  // NULL MUST BE REMOVED FROM THE USER INTERFACE
  full_name: string | null;
  id: string | null;
  shop_name: string | null;
  address: string | null;
  description: string | null;
  phone_panel: number | null;
  phone: number | null;
  instagram_id: string | null;
  website_url: string | null;
  send_social: boolean | null;
  send_contact: boolean | null;
  has_follow_up_message: boolean | null;
  followup_message: string | null;
  welcome_message: string | null;
}

interface AuthState {
  user: User | null;
  token: string | null;
}

const initialState: AuthState = {
  user: {
    full_name: localStorage.getItem("fullName"),
    id: localStorage.getItem("id"),
    shop_name: localStorage.getItem("shopName"),
    address: localStorage.getItem("address"),
    description: localStorage.getItem("description"),
    phone_panel: Number(localStorage.getItem("phonePanel")),
    phone: Number(localStorage.getItem("phone")),
    instagram_id: localStorage.getItem("instagramId"),
    website_url: localStorage.getItem("websiteUrl"),
    send_social: Boolean(localStorage.getItem("sendSocial")),
    send_contact: Boolean(localStorage.getItem("sendContact")),
    has_follow_up_message: Boolean(
      localStorage.getItem("has_follow_up_message")
    ),
    followup_message: localStorage.getItem("followupMessage"),
    welcome_message: localStorage.getItem("welcomeMessage"),
  },
  token: localStorage.getItem("access_token"),
};

const authSlice = createSlice({
  name: "authentication",
  initialState,
  // The functions that handle updates to the authentication state
  reducers: {
    login: (state, action: PayloadAction<{ user: User; token: string }>) => {
      // Update the authState in the app
      state.user = action.payload.user;
      state.token = action.payload.token;
    },
    logout: (state) => {
      // Clear the authState from the app
      state.user = null;
      state.token = null;
    },
  },
});

// Export the reducers which take the current state and an action as arguments, and return a new state result (the reducer function generated by createSlice())
export default authSlice.reducer;
// Export the actions which describe something that happened in the application
export const authActions = authSlice.actions;
